# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  config(relativePath: String): Config!
  configConnection(before: String, after: String, first: Float, last: Float, sort: String): ConfigConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String): PageConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String): PostConnection!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String): AuthorConnection!
  tag(relativePath: String): Tag!
  tagConnection(before: String, after: String, first: Float, last: Float, sort: String): TagConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Config | Page | Post | Author | Tag

type Config implements Node & Document {
  darkMode: Boolean
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type ConfigConnectionEdges {
  cursor: String!
  node: Config
}

type ConfigConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ConfigConnectionEdges]
}

union PageAuthorsAuthor = Author

type PageAuthors {
  author: PageAuthorsAuthor
}

union PageTagsTag = Tag

type PageTags {
  tag: PageTagsTag
}

type Page implements Node & Document {
  date: String
  slug: String
  title: String
  excerpt: String
  authors: [PageAuthors]
  tags: [PageTags]
  content: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

union PostAuthorsAuthor = Author

type PostAuthors {
  author: PostAuthorsAuthor
}

union PostTagsTag = Tag

type PostTags {
  tag: PostTagsTag
}

type Post implements Node & Document {
  date: String
  slug: String
  title: String
  excerpt: String
  authors: [PostAuthors]
  tags: [PostTags]
  content: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Author implements Node & Document {
  name: String
  date: String
  slug: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

type Tag implements Node & Document {
  name: String
  date: String
  slug: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type TagConnectionEdges {
  cursor: String!
  node: Tag
}

type TagConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [TagConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateConfig(relativePath: String!, params: ConfigMutation!): Config!
  createConfig(relativePath: String!, params: ConfigMutation!): Config!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updateTag(relativePath: String!, params: TagMutation!): Tag!
  createTag(relativePath: String!, params: TagMutation!): Tag!
}

input DocumentMutation {
  config: ConfigMutation
  page: PageMutation
  post: PostMutation
  author: AuthorMutation
  tag: TagMutation
}

input ConfigMutation {
  darkMode: Boolean
}

input PageAuthorsMutation {
  author: String
}

input PageTagsMutation {
  tag: String
}

input PageMutation {
  date: String
  slug: String
  title: String
  excerpt: String
  authors: [PageAuthorsMutation]
  tags: [PageTagsMutation]
  content: JSON
}

input PostAuthorsMutation {
  author: String
}

input PostTagsMutation {
  tag: String
}

input PostMutation {
  date: String
  slug: String
  title: String
  excerpt: String
  authors: [PostAuthorsMutation]
  tags: [PostTagsMutation]
  content: JSON
}

input AuthorMutation {
  name: String
  date: String
  slug: String
}

input TagMutation {
  name: String
  date: String
  slug: String
}

schema {
  query: Query
  mutation: Mutation
}
  