# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Float, last: Float): DocumentConnection!
  getDocumentFields: JSON!
  getGlobalDocument(relativePath: String): GlobalDocument!
  getGlobalList(before: String, after: String, first: Float, last: Float): GlobalConnection!
  getPostDocument(relativePath: String): PostDocument!
  getPostList(before: String, after: String, first: Float, last: Float): PostConnection!
  getAuthorDocument(relativePath: String): AuthorDocument!
  getAuthorList(before: String, after: String, first: Float, last: Float): AuthorConnection!
  getPageDocument(relativePath: String): PageDocument!
  getPageList(before: String, after: String, first: Float, last: Float): PageConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float): DocumentConnection!
}

union DocumentNode = GlobalDocument | PostDocument | AuthorDocument | PageDocument

type Global {
  color: String
}

type GlobalDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Global!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type GlobalConnectionEdges {
  cursor: String
  node: GlobalDocument
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

union PostAuthorDocument = AuthorDocument

type Post {
  title: String
  heroImg: String
  excerpt: JSON
  author: PostAuthorDocument
  date: String
  _body: JSON
}

type PostDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Post!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostConnectionEdges {
  cursor: String
  node: PostDocument
}

type PostConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Author {
  name: String
  avatar: String
}

type AuthorDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Author!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type AuthorConnectionEdges {
  cursor: String
  node: AuthorDocument
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

type PageSectionsContent {
  body: JSON
}

union PageSections = PageSectionsContent

type Page {
  sections: [PageSections]
}

type PageDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Page!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PageConnectionEdges {
  cursor: String
  node: PageDocument
}

type PageConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateGlobalDocument(relativePath: String!, params: GlobalMutation!): GlobalDocument!
  createGlobalDocument(relativePath: String!, params: GlobalMutation!): GlobalDocument!
  updatePostDocument(relativePath: String!, params: PostMutation!): PostDocument!
  createPostDocument(relativePath: String!, params: PostMutation!): PostDocument!
  updateAuthorDocument(relativePath: String!, params: AuthorMutation!): AuthorDocument!
  createAuthorDocument(relativePath: String!, params: AuthorMutation!): AuthorDocument!
  updatePageDocument(relativePath: String!, params: PageMutation!): PageDocument!
  createPageDocument(relativePath: String!, params: PageMutation!): PageDocument!
}

input DocumentMutation {
  global: GlobalMutation
  post: PostMutation
  author: AuthorMutation
  page: PageMutation
}

input GlobalMutation {
  color: String
}

input PostMutation {
  title: String
  heroImg: String
  excerpt: JSON
  author: String
  date: String
  _body: JSON
}

input AuthorMutation {
  name: String
  avatar: String
}

input PageSectionsContentMutation {
  body: JSON
}

input PageSectionsMutation {
  content: PageSectionsContentMutation
}

input PageMutation {
  sections: [PageSectionsMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  